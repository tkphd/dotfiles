#!/bin/bash

function tea {
    # Set a timer for your tea. Time is measured in seconds.
    timer=300 # default: 5 minutes
    if [[ $(which kdialog) == "" ]]; then
        echo "You must install kdialog!"
        timer=0
    fi
    if [[ $# == 1 ]]; then
        timer=$1
    else
        echo -e "Usage: tea [count]\n   eg, tea     # 5 min\n       tea 180 # 3 min"
        timer=0
    fi
    if [[ $timer > 0 ]]; then
        sleep $timer
        kdialog --msgbox "Your tea is ready."
    fi
}

function update-conda() {
    # Update Anaconda Python and all its virtual environments
    echo "=== Updating conda ==="
    conda update --yes conda
    for name in base $(ls ~/.conda/anaconda/envs/); do
        echo -e "\n=== Updating ${name} env ===\n"
        conda update -n ${name} --all --yes
    done
}

function whoareu {
    # Print the name of the person assigned the specified ID
    local user=$(id -u $1)
    local info=$(getent passwd $user)
    echo $info | awk -F':' '{print $5}' | awk -F',' '{print $1}'
}

if [ -x /usr/bin/dircolors ]; then
    test -r ${HOME}/.dotfiles/bash/dircolors && eval "$(dircolors -b ${HOME}/.dotfiles/bash/dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    alias l='ls -CF'
    alias la='ls -A'
    alias ll='ls -l'
    alias dir='dir --color=auto'
    alias vdir='vdir --color=auto'
    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi
if [[ -f ${HOME}/.dotfiles/local/HostIP ]]; then
    source ${HOME}/.dotfiles/local/HostIP
fi
alias acs="apt-cache search"
alias afb="sudo apt --fix-broken install"
alias agi="sudo apt install"
alias aguu="sudo apt update; sudo apt full-upgrade -y; update-conda"
alias addroot="su root -c 'stty -echo; /usr/bin/ssh-add -c -t 10h /root/.ssh/id_rsa; stty echo'"
alias aria="aria2c -c -m 0"
alias astyle="astyle --style=linux --indent-col1-comments --indent=tab --indent-preprocessor --pad-header --align-pointer=type --keep-one-line-blocks --suffix=none"
alias condact="conda activate"
alias condeact="conda deactivate"
alias convertbw="convert -density 300 -colorspace gray"
alias curl="curl -L -C -"
alias ddp="sudo dd bs=4M conv=fsync status=progress"
alias dmesg="/bin/dmesg --color=always | /bin/less -R"
alias e="emacsclient -t"
alias ec="emacsclient -c -a emacs"
alias ed="emacs --daemon"
alias ek="emacsclient -e '(kill-emacs)'"
alias ff="feh -F --force-aliasing"
alias ffmp4="ffmpeg -pix_fmt yuv420p -r 30"
alias fixperm="find . -perm -u=r -a -not -perm -o=r -exec chmod -v a+r {} \; ; find . -perm -u=x -a -not -perm -o=x -exec chmod -v a+x {} \;"
alias se="sudo emacs -nw"
alias gdb="gdb -q"
alias gue="git config user.email 'trevor.keller@gmail.com'"
alias guvc="guvcviewer -x 1600x1200"
alias ifstat="sudo iftop -i enp0s31f6"
alias jbld="docker run --rm --volume=$PWD:/srv/jekyll -it jekyll/jekyll:stable jekyll build"
alias jsrv="docker run --rm --volume=$PWD:/srv/jekyll -p 4000:4000 -it jekyll/jekyll:stable jekyll serve"
alias kernperf="perf stat -e cycles,instructions,cache-references,cache-misses,branches,branch-misses,task-clock,faults,minor-faults,context-switches,migrations -r 3"
alias less="less -mN"
alias mmspstyle="/usr/bin/astyle --style=linux --indent-col1-comments --indent=tab --indent-preprocessor --indent-preproc-cond --pad-header --align-pointer=type --keep-one-line-blocks --suffix=none"
alias nettop="sudo nethogs enp0s31f6"
alias p="python 2>/dev/null"
alias ping="ping -c 4"
alias please="sudo"
alias pss="pacman -Ss"
alias psi="sudo pacman -S"
alias psu="sudo pacman -Syu"
alias pvrc="pvserver -rc --client-host=${HostIP}"
alias rockstar="node ~/repositories/rockstar/satriani/rockstar.js"
alias rshop="rsync -Pavz -e \"ssh -o ProxyJump=mr-french -o UserKnownHostsFile=~/.ssh/known_hosts_hop\""
alias rs="rsync -Pavz"
alias rsynquickly="rsync -aHAXxv --numeric-ids --delete --progress -e 'ssh -T -c arcfour128 -o Compression=no -x'"
alias scancel="scancel -u ${USER}"
alias si="sinfo -o \"%20P %5D %14F %8z %10m %10d %11l %16f %N\""
alias sj="sacct --format=User,AssocID,JobID,JobName,Partition,ReqCPUS,NNodes,NTasks,NCPUS,NodeList,Layout,State,Elapsed,CPUTime -j"
alias sa="sacct --format=User,AssocID,JobID,JobName,Partition,ReqCPUS,NNodes,NTasks,NCPUS,NodeList,Layout,State,Elapsed,CPUTime -u ${USER}"
alias sq="squeue -o \"%14i %10j %4t %8q %8u %10P %10Q %8D %4C %11l %11L %R\" -u ${USER}"
alias ss="squeue --start -u ${USER}"
alias sshop="ssh -i ${HOME}/.ssh/id_rsa -o ProxyJump=mr-french -o UserKnownHostsFile=~/.ssh/known_hosts_hop"
alias ssr="ssh -l root -o ProxyJump=mr-french -o UserKnownHostsFile=~/.ssh/known_hosts_su"
alias ssm="ssh -l machine -i ~/.ssh/machine_rsa -o UserKnownHostsFile=~/.ssh/known_hosts_machine"
alias time="/usr/bin/time -f' Time (%E wall, %U user, %S sys)'"
alias vg="valgrind -v --log-file=val.log --leak-check=full --show-leak-kinds=all --trace-children=yes"
alias wget="wget -d -c --tries=0 --read-timeout=30"
alias win="sudo intel_gpu_top -s 100"
alias wnv="watch -n 1 nvidia-smi"
alias yss="yaourt -Ss"
alias ysi="yaourt -S"
alias ysu="yaourt -Syu"

if [[ $(hostname -s) == "huginn" ]]
then
    alias airplanemode="if [[ $(nmcli n connectivity) == 'none' ]]; then nmcli n on; elif [[ $(nmcli n connectivity) == 'full' ]]; then nmcli n off; fi"
    alias wihome="nmcli con up home"
    alias wiwork="nmcli con up work passwd-file ${HOME}/.wifi"
fi

if [[ $(hostname -s) == "enki" ]]; then
    alias  sbash="srun -p debug -t 60 -n 1 --pty bash"
    alias squart="srun -p debug -t 60 -n 20 --gres=gpu:1 --pty bash"
elif [[ $(hostname -s) == "ruth" ]]; then
    alias   sbash="srun -p gpu -t 60 -n 1  --pty bash"
    alias  squart="srun -p gpu -t 60 -n 16 --gres=gpu:pascal:1 --pty bash"
    alias svquart="srun -p gpu -t 60 -n 16 --gres=gpu:volta:1  --pty bash"
fi

# === Pomodoro Method ===

function countdown {
    # https://www.putorius.net/how-to-make-countdown-timer-in-bash.html
    min=0
    sec=0

    if [[ $1 != "" ]]; then
        min=$(($1 / 60))
        sec=$(($1 % 60))
    fi

    tput civis

    while [ $min -ge 0 ]; do
        while [ $sec -ge 0 ]; do
            echo -ne "$(printf "%02d" $min):$(printf "%02d" $sec)\r"
            let "sec=sec-1"
            sleep 1
        done
        sec=59
        let "min=min-1"
    done

    tput cnorm
}

function pomodoro {
    # https://en.wikipedia.org/wiki/Pomodoro_Technique
    if [[ $(which kdialog) == "" ]]; then
        echo "You must install kdialog!"
    else
        wrk=$((25 * 60)) # work interval
        srt=$((5 * 60))  # short break
        lng=$((20 * 60)) # long break
        n=4 # number of pomodoros per long break
        start=$(date +%s)
        for i in $(seq 1 ${n}); do
            pomstart=$(date +%s)
            if [[ $i != 1 ]]; then
                kdialog --msgbox 'Take a short break ^_^'
                sleep ${srt}
            fi
            kdialog --msgbox 'Back to work -_-'
            countdown ${wrk}
            pomfinish=$(date +%s)
            pomrun=$(python -c "print('{0:2.0f}'.format((${pomfinish} - ${pomstart}) / 60.))")
            echo "Pomodoro ${i} ran ${pomrun} min"
        done
        kdialog --msgbox 'Take a long break *_*'
        countdown ${lng}
        kdialog --msgbox 'Wrap up, or start another cycle ~_~'
        finish=$(date +%s)
        cycrun=$(python -c "print('{0:3.0f}'.format((${finish} - ${start}) / 60.))")
        echo "Quartet of pomodoros ran ${cycrun} min"
    fi
}
