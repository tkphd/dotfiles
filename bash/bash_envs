#!/bin/bash

# === AUR ===
export gaur="https://aur.archlinux.org"
# === BeeGFS ===
[ -d /opt/beegfs ] && export PATH="${PATH}:/opt/beegfs/sbin"
# === Borg ===
export BORG_RSH="ssh -i ${HOME}/.ssh/danger_borg_rsa"
# === Conda ===
__conda_setup="$(${HOME}/.conda/anaconda/bin/conda shell.bash hook 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__conda_setup"
else
    if [ -f "${HOME}/.conda/anaconda/etc/profile.d/conda.sh" ]
    then
        source "${HOME}/.conda/anaconda/etc/profile.d/conda.sh"
    else
        export PATH="${HOME}/.conda/anaconda/bin:$PATH"
    fi
fi
unset __conda_setup
# === CUDA ===
# See https://arnon.dk/matching-sm-architectures-arch-and-gencode-for-various-nvidia-cards/
if [[ $(hostname -s) == "p859561" ]]; then
    export CUDARCH=sm_35
elif [[ $(hostname -s) == "rgpu3" ]]; then
    export CUDARCH=sm_60
else
    export CUDARCH=sm_50
fi
CUDA_TEST_PATH=$(find /usr/local/cuda* -name nvcc 2>/dev/null)
if [[ ${CUDA_HDR_PATH} == "" && ${CUDA_TEST_PATH} != "" ]]; then
    NVCCBIN=$(dirname "$(ls -t ${CUDA_TEST_PATH} 2>/dev/null | head -n 1)")
    if [[ $NVCCBIN != "" ]]; then
        export PATH=${PATH}:${NVCCBIN}
        export CUDA_HDR_PATH="$(dirname ${NVCCBIN})"/targets/x86_64-linux/include
        export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:"$(dirname ${CUDA_HDR_PATH}/lib)"
    fi
    if [[ $CUDA_HDR_PATH == "" ]]; then
        NVCCBIN=$(dirname $(ls -t "$(find /opt/cuda -name nvcc 2>/dev/null)" 2>/dev/null | head -n 1))
        if [[ $NVCCBIN != "" ]]; then
            export PATH=${PATH}:${NVCCBIN}
            export CUDA_HDR_PATH="$(dirname ${NVCCBIN})"/targets/x86_64-linux/include
            export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:"$(dirname ${CUDA_HDR_PATH}/lib)"
        fi
    fi
    if [[ ${CUDA_HDR_PATH} == "" ]]; then
        export CUDA_HDR_PATH=/usr/include
    fi
fi
# === Emacs ===
export ALTERNATE_EDITOR=""
export EDITOR="/usr/bin/emacsclient -nw"
export VISUAL="/usr/bin/emacsclient -nw"
export TERMINAL=/usr/bin/konsole
export EMACSD=/tmp/emacs-${USER}
export EMACSBD=${EMACSD}/backups
export EMACSSD=${EMACSD}/saves
if [[ ! -d ${EMACSD} ]]; then
    mkdir -p ${EMACSD}
    mkdir -p ${EMACSBD}
    mkdir -p ${EMACSSD}
fi
# === GCC ===
export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'
# === GSL ===
export GSL_PATH=${HOME}/.conda/envs/py2/include
export GSL_LIB=${HOME}/.conda/envs/py2/lib
export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:${GSL_LIB}
# === Haskell ===
[ -f "/home/thor/.ghcup/env" ] && source "/home/thor/.ghcup/env" # ghcup-env
# === Intel ===
if [[ -d /opt/intelFPGA_lite/18.1/quartus/bin ]]; then
    export PATH=${PATH}:/opt/intelFPGA_lite/18.1/quartus/bin:/opt/intelFPGA/18.1/qprogrammer/bin
elif [[ -d /usr/local/${USER}/opt/intelFPGA_pro/19.1 ]]; then
    export INTELFPGAOCLSDKROOT=/usr/local/${USER}/opt/intelFPGA_pro/19.1/hld
    export QSYS_ROOTDIR=/usr/local/${USER}/opt/intelFPGA_pro/19.1/qsys/bin
fi
if [[ -d /opt/intel/compilers_and_libraries_2019.4.243/linux/bin/intel64 ]]; then
   export PATH=$PATH:/opt/intel/compilers_and_libraries_2019.4.243/linux/bin/intel64
fi
if [[ -d /opt/intel/compilers_and_libraries_2019.4.243/linux/mpi/intel64/bin ]]; then
   export PATH=$PATH:/opt/intel/compilers_and_libraries_2019.4.243/linux/mpi/intel64/bin
fi
# === KDE ===
export KDE_FULL_SESSION=false
export KDEWM=/usr/bin/i3
# === MMSP ===
export MMSP_PATH=${HOME}/research/projects/mmsp
export PATH=${PATH}:${MMSP_PATH}/utility
# === NIX ===
[ -d ${HOME}/.nix-profile/etc/profile.d ] && source ${HOME}/.nix-profile/etc/profile.d/nix.sh
# === OpenARC === (Accelerator Research Compiler)
[ -d ${HOME}/repositories/OpenARC/ ] && export openarc=${HOME}/repositories/OpenARC
# === OpenMPI ===
export OMPI_MCA_opal_cuda_support=true # enable CUDA awareness
# === PGI ===
if [[ -f /opt/pgi/license.dat ]]; then
    export PGI_PATH=/opt/pgi/linux86-64-llvm/19.10
    export LM_LICENSE_FILE=/opt/pgi/license.dat
    export PATH=${PATH}:/opt/pgi/linux86-64-llvm/19.10/bin
fi
# === Qt ===
export QT_XKB_CONFIG_ROOT=/usr/share/X11/xkb
if [[ -d /usr/local/lib/plugins/platforms ]]; then
   export QT_QPA_PLATFORM_PLUGIN_PATH=/usr/local/lib/plugins/platforms
elif [[ -d /usr/lib/x86_64-linux-gnu/qt5/plugins/platforms ]]; then
   export QT_QPA_PLATFORM_PLUGIN_PATH=/usr/lib/x86_64-linux-gnu/qt5/plugins/platforms
fi
# === Ruby ===
if [[ -d ${HOME}/gems ]]; then
    export GEM_HOME=${HOME}/gems
    export PATH=${HOME}/gems/bin:${PATH}
elif [[ -d ${HOME}/.rvm ]]; then
    # Add RVM to PATH for scripting. Make sure this is the last PATH variable change.
    export PATH="$PATH:${HOME}/.rvm/bin"
    source ${HOME}/.rvm/scripts/rvm
fi
# === Rust ===
[ -d ${HOME}/.cargo/env ] && source "${HOME}/.cargo/env"
# === SSH ===
export SSH_ASKPASS=/usr/bin/ssh-askpass
# === Thermo-Calc ===
export TC20A_HOME=${HOME}/Thermo-Calc/2020a/
export PATH=$PATH:${HOME}/Thermo-Calc/2020a/SDK/TCAPI:${HOME}/Thermo-Calc/2020a/SDK/TQ
export LSERVRC="${HOME}/Thermo-Calc/lservrc"
export LSHOST="NO-NET"
# === VTK ===
if [[ ${LD_LIBRARY_PATH} == "" ]]; then
    export LD_LIBRARY_PATH=/usr/lib/paraview
else
    export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:/usr/lib/paraview
fi
# === XDG ===
export XDG_RUNTIME_DIR=/tmp/runtime-${USER}
[ -d "${XDG_RUNTIME_DIR}" ] || mkdir "${XDG_RUNTIME_DIR}"
# === Machine-specific Tasks ===
if [[ $(hostname -s) == "p859561" ]]; then
    unset MAIL
    export CHROME_CONFIG_HOME=/usr/local/${USER}
    export CHROME_USER_DATA_HOME=/usr/local/${USER}/google-chrome
    export AMGX_DIR=/usr/local/${USER}/opt/AMGX
    export GSL_PATH=${HOME}/.conda/envs/mmsp/include
    export MPI_PATH=${HOME}/.conda/envs/mmsp/include
    export LIBGL_ALWAYS_INDIRECT=1
fi
if [[ $(hostname -s | grep enki)  != "" ]]; then
    export PKG_CONFIG_PATH=/wrk/tnk10/repositories/lapack-3.9.0/build:/wrk/tnk10/repositories/lapack-3.9.0/build/BLAS:/wrk/tnk10/repositories/Ipopt
    export CUDA_HDR_PATH=/usr/local/cuda-10.0/targets/ppc64le-linux/include
    export GSL_PATH=/wrk/tnk10/.conda/envs/py2/include/
    export GSL_LIB=/wrk/tnk10/.conda/envs/py2/lib
    export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:$(dirname ${CUDA_HDR_PATH}/lib):${GSL_LIB}
fi
[ -f ${HOME}/.dotfiles/local/tokens ] && source ${HOME}/.dotfiles/local/tokens
